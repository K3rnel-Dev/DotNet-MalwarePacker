using DotNet_Packer.Builder;
using DotNet_Packer.CLI;
using System;
using System.IO;

namespace DotNet_Packer
{
    internal class DotPacker
    {
        static void Main(string[] args)
        {
            ConsoleHelper.PrintBanner();
            if (!ElementHelper.ValidateArgs(args))
                return;

            string inputFile = "", outputFile = "stub.exe";
            
            string xorKey = EncryptEngine.GenerateRandomXorKey(EncryptEngine.GenerateRandomInt());
            bool patch_etw = false;

            bool obfuscate = false;
            int junkClasses = 100, junkMethodsPerClass = 15;

            ElementHelper.ParseArguments(args, ref inputFile, ref outputFile, ref obfuscate, ref junkClasses, ref junkMethodsPerClass, ref patch_etw);

            if (string.IsNullOrEmpty(inputFile))
            {
                ConsoleHelper.PrintError("Input file not specified. Use --file <path>");
                return;
            }

            try
            {
                string encryptedData = EncryptEngine.Encrypt(inputFile, xorKey);

                bool result = BuildEngine.Compilate(encryptedData, xorKey, outputFile, patch_etw);

                if (result && obfuscate)
                {
                    ElementHelper.PerformObfuscation(outputFile, junkClasses, junkMethodsPerClass);
                }

                ConsoleHelper.PrintSuccess($" - Build completed.\n\n[!] Output Path: {outputFile}\n[-] Key: {xorKey}\n[-] Key-Size: {xorKey.Length}");
            }
            catch (Exception ex)
            {
                ConsoleHelper.PrintError($"An error occurred: {ex.Message}");
            }
        }
    }
}
