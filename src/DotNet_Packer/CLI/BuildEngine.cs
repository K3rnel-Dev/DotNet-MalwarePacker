using DotNet_Packer.CLI;
using Microsoft.CSharp;
using System;
using System.CodeDom.Compiler;
using System.IO;
using System.Text;

namespace DotNet_Packer.Builder
{
    internal class BuildEngine
    {
        public static bool Compilate(string App, string XorKey, string OutPath, bool patchEtw)
        {
            string csharpcode = Properties.Resources.stub
                .Replace("%BYTES_ENC%", App)
                .Replace("%KEY_ENC%", XorKey);


            CompilerParameters parameters = new CompilerParameters
            {
                GenerateExecutable = true,
                OutputAssembly = OutPath,
                CompilerOptions = "/target:winexe /platform:x86",
                IncludeDebugInformation = false
            };

            if (patchEtw)
            {
                parameters.CompilerOptions += " /define:ETW_PATCHER";
                csharpcode = csharpcode
                    .Replace("%ntdll_lib%", Convert.ToBase64String(Encoding.UTF8.GetBytes("ntdll.dll")))
                    .Replace("%etwtrace%", Convert.ToBase64String(Encoding.UTF8.GetBytes("EtwEventWrite")));
            }


            parameters.ReferencedAssemblies.Add("System.dll");

            using (CSharpCodeProvider codeProvider = new CSharpCodeProvider())
            {
                CompilerResults results = codeProvider.CompileAssemblyFromSource(parameters, csharpcode);

                if (results.Errors.Count > 0)
                {
                    using (StreamWriter writer = new StreamWriter("compilation_errors.txt", true))
                    {
                        foreach (CompilerError error in results.Errors)
                        {
                            writer.WriteLine($"Error: {error.ErrorText} in {error.FileName} at {error.Line}:{error.Column}");
                        }
                    }
                    throw new InvalidOperationException("Failed to compile the stub. Check compilation_errors.txt for details.");
                }
            }
            return true;
        }
    }
}
