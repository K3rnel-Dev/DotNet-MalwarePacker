using dnlib.DotNet;
using DotNet_Packer.Builder;
using DotNet_Packer.CLI;
using System;
using System.IO;
using System.Linq;

namespace DotNet_Packer
{
    internal static class ElementHelper
    {
        public static bool ValidateArgs(string[] args)
        {
            if (args.Length == 0 || args.Contains("-h") || args.Contains("--help"))
            {
                ConsoleHelper.PrintHelp();
                return false;
            }
            return true;
        }

        public static void ParseArguments(string[] args, ref string inputFile, ref string outputFile, ref bool obfuscate, ref int junkClasses, ref int junkMethodsPerClass, ref bool patchEtw)
        {
            for (int i = 0; i < args.Length; i++)
            {
                switch (args[i])
                {
                    case "--file":
                        inputFile = args[++i];
                        break;
                    case "--out":
                        outputFile = args[++i];
                        break;
                    case "--obfuscate":
                        obfuscate = true;
                        break;
                    case "--junk":
                        junkClasses = int.Parse(args[++i]);
                        break;
                    case "--in-junk":
                        junkMethodsPerClass = int.Parse(args[++i]);
                        break;
                    case "--patch-etw":
                        patchEtw = true;
                        break;
                    default:
                        ConsoleHelper.PrintError($"Unknown argument: {args[i]}");
                        break;
                }
            }
        }

        public static void PerformObfuscation(string outputFile, int junkClasses, int junkMethodsPerClass)
        {
            string directory = Path.GetDirectoryName(outputFile);
            string originalFileName = Path.GetFileName(outputFile);
            string moduleNew = Path.Combine(directory, $"tmp_{originalFileName}");
            try
            {
                File.Copy(outputFile, moduleNew, overwrite: true);
                using (ModuleDef module = ModuleDefMD.Load(moduleNew))
                {
                    ObfuscateEngine.RenameProtector.Execute(module);
                    ObfuscateEngine.JunkMethods.Execute(module, junkClasses, junkMethodsPerClass);
                    module.Write(outputFile);
                }

                ConsoleHelper.PrintSuccess("Obfuscation successful.");
            }
            catch (Exception ex)
            {
                ConsoleHelper.PrintError($"Obfuscation failed: {ex.Message}");
            }
            finally
            {
                File.Delete(moduleNew);
            }
        }
    }
}
